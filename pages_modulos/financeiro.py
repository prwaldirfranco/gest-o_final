import streamlit as st
import os
import json
import uuid
from datetime import datetime, date
from io import BytesIO
import pandas as pd
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

CAMINHO_FINANCEIRO = "data/financeiro.json"
CAMINHO_MEMBROS = "data/membros.json"

# Categorias aprimoradas
CATEGORIAS_ENTRADA = ["D√≠zimo", "Oferta", "Doa√ß√£o Espec√≠fica", "Renda de Eventos", "Outra Receita"]
CATEGORIAS_SAIDA = ["Aluguel/IPTU", "Luz/√Ågua/Telefone", "Sal√°rios/Pr√≥-Labore", "Manuten√ß√£o/Reformas", "Miss√µes", "A√ß√£o Social", "Outra Despesa"]
MESES = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]

# --- Fun√ß√µes de Leitura/Escrita ---

def carregar_json(caminho):
    """Carrega a lista de dados do arquivo JSON."""
    os.makedirs(os.path.dirname(caminho) or '.', exist_ok=True)
    if os.path.exists(caminho):
        try:
            with open(caminho, "r", encoding="utf-8") as f:
                return json.load(f) or []
        except json.JSONDecodeError:
            return []
    return []

def salvar_json(dados, caminho):
    """Salva a lista de dados no arquivo JSON."""
    with open(caminho, "w", encoding="utf-8") as f:
        json.dump(dados, f, indent=4, ensure_ascii=False)

# --- Fun√ß√µes de Relat√≥rio PDF ---

def gerar_pdf_analise(dados):
    """Gera um PDF detalhado da an√°lise financeira."""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    elements = []

    elements.append(Paragraph("üí∞ Relat√≥rio Financeiro Detalhado da Igreja", styles["Heading1"]))
    elements.append(Spacer(1, 12))

    total_entradas = sum(d["valor"] for d in dados if d["tipo"] == "Entrada")
    total_saidas = sum(d["valor"] for d in dados if d["tipo"] == "Sa√≠da")
    saldo = total_entradas - total_saidas

    elements.append(Paragraph(f"**Total de Entradas:** R$ {total_entradas:,.2f}", styles["Normal"]))
    elements.append(Paragraph(f"**Total de Sa√≠das:** R$ {total_saidas:,.2f}", styles["Normal"]))
    elements.append(Paragraph(f"**Saldo Total:** R$ {saldo:,.2f}", styles["Heading3"]))
    elements.append(Spacer(1, 18))

    # Tabela de dados
    dados_tabela = [["Data", "Tipo", "Categoria", "Valor", "Descri√ß√£o"]]
    for d in sorted(dados, key=lambda x: x["data"], reverse=True):
        dados_tabela.append([
            d.get("data", "-"),
            d.get("tipo", "-"),
            d.get("categoria", "-"),
            f"R$ {d.get('valor', 0):,.2f}",
            d.get("descricao", "-")
        ])

    tabela = Table(dados_tabela, colWidths=[60, 40, 90, 60, 150], repeatRows=1)
    tabela.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('FONTSIZE', (0,0), (-1,-1), 8),
        ('ALIGN', (3,1), (3,-1), 'RIGHT'),
    ]))
    elements.append(Paragraph("Hist√≥rico de Movimenta√ß√µes:", styles["Heading3"]))
    elements.append(Spacer(1, 6))
    elements.append(tabela)
    doc.build(elements)
    buffer.seek(0)
    return buffer

# --- Fun√ß√µes de Exibi√ß√£o de Telas ---

def exibir_registro_movimento(dados, nomes_membros):
    """Exibe o formul√°rio de registro de entrada/sa√≠da."""
    st.subheader("‚ûï Registrar Nova Movimenta√ß√£o")
    
    with st.form("form_financeiro", clear_on_submit=True):
        
        # Colunas 1: Tipo e Categoria
        col_tipo, col_categoria = st.columns(2)
        with col_tipo:
            tipo = st.selectbox("Tipo de Movimento *", ["Entrada", "Sa√≠da"])
        with col_categoria:
            categorias_disponiveis = CATEGORIAS_ENTRADA if tipo == "Entrada" else CATEGORIAS_SAIDA
            categoria = st.selectbox("Categoria *", categorias_disponiveis)

        # Colunas 2: Valor e Data
        col_valor, col_data = st.columns(2)
        with col_valor:
            valor = st.number_input("Valor (R$)*", min_value=0.01, format="%.2f", step=0.01)
        with col_data:
            data = st.date_input("Data do Movimento *", value=date.today())

        # M√™s de Refer√™ncia
        mes_referencia = st.selectbox("üìÖ M√™s de Refer√™ncia", MESES, index=datetime.now().month - 1)
        
        # Dizimista (aparece apenas para D√≠zimo)
        dizimista = ""
        if categoria == "D√≠zimo" and tipo == "Entrada" and nomes_membros:
            st.markdown("---")
            dizimista = st.selectbox("Selecione o membro dizimista (Opcional)", ["N√£o Identificado"] + nomes_membros)

        descricao = st.text_input("Descri√ß√£o (Obrigat√≥rio)*", placeholder="Ex: Pagamento da conta de luz de Outubro")
        observacoes = st.text_area("Observa√ß√µes (Opcional)")

        st.markdown("---")
        enviado = st.form_submit_button("üíæ Salvar Registro", type="primary", use_container_width=True)

        if enviado:
            if valor <= 0 or not descricao:
                st.error("Por favor, preencha o **Valor** e a **Descri√ß√£o**.")
                return

            novo = {
                "id": str(uuid.uuid4()),
                "tipo": tipo,
                "categoria": categoria,
                "valor": valor,
                "data": str(data),
                "mes_referencia": mes_referencia,
                "descricao": descricao,
                "observacoes": observacoes,
                "dizimista": dizimista if dizimista != "N√£o Identificado" else "",
                "registrado_em": datetime.now().strftime("%d/%m/%Y %H:%M")
            }
            dados.append(novo)
            salvar_json(dados, CAMINHO_FINANCEIRO)
            st.session_state["financeiro_sucesso"] = True
            st.rerun()

    if st.session_state.get("financeiro_sucesso"):
        st.success("‚úÖ Registro salvo com sucesso!")
        del st.session_state["financeiro_sucesso"]

def exibir_historico_e_balanco(dados, nomes_membros):
    """Exibe o Balan√ßo, M√©tricas, Gr√°ficos e a Tabela de A√ß√£o."""
    if not dados:
        st.info("Nenhuma movimenta√ß√£o registrada ainda. Registre a primeira na aba '‚ûï Registrar Movimento'.")
        return

    df = pd.DataFrame(dados)
    df['data'] = pd.to_datetime(df['data'])
    
    # Filtros de Per√≠odo
    st.markdown("### üîé Filtro de Per√≠odo")
    col_inicio, col_fim = st.columns(2)
    data_min = df['data'].min().date()
    data_max = df['data'].max().date()
    
    filtro_inicio = col_inicio.date_input("Data Inicial", value=data_min, min_value=data_min, max_value=data_max)
    filtro_fim = col_fim.date_input("Data Final", value=data_max, min_value=data_min, max_value=data_max)
    
    dados_filtrados = df[(df['data'].dt.date >= filtro_inicio) & (df['data'].dt.date <= filtro_fim)]
    
    # 1. Vis√£o Geral (M√©tricas)
    st.markdown("---")
    st.markdown("## üìä Vis√£o Geral do Caixa")

    total_entradas = dados_filtrados[dados_filtrados['tipo'] == 'Entrada']['valor'].sum()
    total_saidas = dados_filtrados[dados_filtrados['tipo'] == 'Sa√≠da']['valor'].sum()
    saldo = total_entradas - total_saidas
    
    col1, col2, col3 = st.columns(3)
    col1.metric("üí∏ Total Entradas", f"R$ {total_entradas:,.2f}")
    col2.metric("üíµ Total Sa√≠das", f"R$ {total_saidas:,.2f}")
    col3.metric("üìà Saldo no Per√≠odo", f"R$ {saldo:,.2f}", delta_color=("normal" if saldo >= 0 else "inverse"))
    
    # 2. Balan√ßo por Categoria (Gr√°ficos)
    st.markdown("---")
    st.markdown("## üßæ Balan√ßo por Categoria")
    
    col_grafico1, col_grafico2 = st.columns(2)
    
    # Distribui√ß√£o de Entradas
    entradas_cat = dados_filtrados[dados_filtrados['tipo'] == 'Entrada'].groupby('categoria')['valor'].sum().sort_values(ascending=False)
    if not entradas_cat.empty:
        col_grafico1.markdown("#### Distribui√ß√£o de Receitas")
        col_grafico1.dataframe(entradas_cat.apply(lambda x: f"R$ {x:,.2f}"), use_container_width=True)
        col_grafico1.bar_chart(entradas_cat)
    else:
        col_grafico1.info("Sem Entradas no per√≠odo.")
    
    # Distribui√ß√£o de Sa√≠das
    saidas_cat = dados_filtrados[dados_filtrados['tipo'] == 'Sa√≠da'].groupby('categoria')['valor'].sum().sort_values(ascending=False)
    if not saidas_cat.empty:
        col_grafico2.markdown("#### Distribui√ß√£o de Despesas")
        col_grafico2.dataframe(saidas_cat.apply(lambda x: f"R$ {x:,.2f}"), use_container_width=True)
        col_grafico2.bar_chart(saidas_cat)
    else:
        col_grafico2.info("Sem Sa√≠das no per√≠odo.")

    # 3. Hist√≥rico de Movimenta√ß√µes (Tabela de A√ß√£o)
    st.markdown("---")
    st.markdown("## üìã Hist√≥rico Detalhado (Selecionar Linha para A√ß√£o)")
    
    # Bot√£o de Exportar PDF
    col_pdf, col_spacer = st.columns([1, 3])
    with col_pdf:
         st.download_button(
            "üì• Baixar PDF do Balan√ßo",
            data=gerar_pdf_analise(dados_filtrados.to_dict('records')),
            file_name=f"balanco_financeiro_{filtro_inicio.strftime('%Y%m%d')}_a_{filtro_fim.strftime('%Y%m%d')}.pdf",
            mime="application/pdf",
            use_container_width=True
        )

    # Tabela para sele√ß√£o
    dados_tabela = dados_filtrados[['data', 'tipo', 'categoria', 'valor', 'descricao', 'dizimista', 'id']].rename(columns={
        'data': 'Data', 'tipo': 'Tipo', 'categoria': 'Categoria', 'valor': 'Valor (R$)', 'descricao': 'Descri√ß√£o', 'dizimista': 'Dizimista'
    })
    
    dados_tabela['Valor (R$)'] = dados_tabela['Valor (R$)'].apply(lambda x: f"R$ {x:,.2f}")
    
    if "edicao_financeira_id" not in st.session_state:
        st.session_state["edicao_financeira_id"] = None

    # Exibe a tabela para sele√ß√£o
    st.dataframe(
        dados_tabela.drop(columns=['id']),
        hide_index=True,
        use_container_width=True,
        on_select="rerun",
        selection_mode="single-row" 
    )
    
    # L√≥gica de Edi√ß√£o/Exclus√£o via sele√ß√£o da linha
    selecao = st.session_state.get('dataframe_select_rows')
    if selecao and selecao.get('selection') and len(selecao['selection']['rows']) > 0:
        index_selecionado = selecao['selection']['rows'][0]
        id_selecionado = dados_filtrados.iloc[index_selecionado]['id']
        movimento_selecionado = df[df['id'] == id_selecionado].iloc[0].to_dict()
        
        st.markdown("---")
        st.markdown(f"### ‚öôÔ∏è A√ß√£o: {movimento_selecionado['descricao'][:50]}...")
        
        col_edita, col_exclui = st.columns(2)
        
        if col_edita.button("‚úèÔ∏è Editar Movimento", key="btn_edita_mov", use_container_width=True, type="primary"):
            st.session_state["edicao_financeira_id"] = id_selecionado
            st.rerun()

        if col_exclui.button("üóëÔ∏è Excluir Movimento", key="btn_exclui_mov", use_container_width=True, type="secondary"):
            dados_atualizados = [d for d in dados if d["id"] != id_selecionado]
            salvar_json(dados_atualizados, CAMINHO_FINANCEIRO)
            st.success("Movimenta√ß√£o exclu√≠da com sucesso.")
            st.rerun()

def exibir_form_edicao_historico(dados):
    """Exibe o formul√°rio de edi√ß√£o para um item selecionado."""
    mov_id = st.session_state["edicao_financeira_id"]
    mov_original = next((d for d in dados if d["id"] == mov_id), None)

    if not mov_original:
        st.error("Erro: Movimenta√ß√£o n√£o encontrada para edi√ß√£o.")
        st.session_state["edicao_financeira_id"] = None
        return

    st.header(f"‚úèÔ∏è Editando: {mov_original['descricao'][:50]}...")
    
    with st.form("form_edicao_movimento"):
        st.info(f"Tipo: **{mov_original['tipo']}** | Categoria: **{mov_original['categoria']}**")

        col_valor_edit, col_data_edit = st.columns(2)
        with col_valor_edit:
             novo_valor = st.number_input("Valor (R$)*", value=mov_original["valor"], min_value=0.01, format="%.2f", step=0.01)
        with col_data_edit:
             novo_data = st.date_input("Data do Movimento *", value=datetime.strptime(mov_original["data"], '%Y-%m-%d').date())

        novo_mes = st.selectbox("üìÖ M√™s de Refer√™ncia", MESES, index=MESES.index(mov_original["mes_referencia"]))
        
        # L√≥gica de dizimista para edi√ß√£o
        novo_dizimista = mov_original.get("dizimista", "")
        if mov_original["categoria"] == "D√≠zimo":
            membros = carregar_json(CAMINHO_MEMBROS)
            nomes_membros = [m["nome"] for m in membros]
            # Encontra o √≠ndice para pr√©-sele√ß√£o
            default_options = ["N√£o Identificado"] + nomes_membros
            try:
                default_index = default_options.index(novo_dizimista) if novo_dizimista else 0
            except ValueError:
                default_index = 0
            
            novo_dizimista = st.selectbox("Membro Dizimista", default_options, index=default_index)

        nova_desc = st.text_input("Descri√ß√£o*", value=mov_original["descricao"])
        nova_obs = st.text_area("Observa√ß√µes", value=mov_original["observacoes"])

        st.markdown("---")
        col_salva, col_cancela = st.columns(2)
        confirmado = col_salva.form_submit_button("üíæ Salvar Altera√ß√µes", type="primary", use_container_width=True)
        cancelado = col_cancela.form_submit_button("‚ùå Cancelar Edi√ß√£o", use_container_width=True)

        if confirmado:
            if novo_valor <= 0 or not nova_desc:
                st.error("Por favor, preencha o **Valor** e a **Descri√ß√£o**.")
                return

            mov_original["valor"] = novo_valor
            mov_original["data"] = str(novo_data)
            mov_original["mes_referencia"] = novo_mes
            mov_original["descricao"] = nova_desc
            mov_original["observacoes"] = nova_obs
            mov_original["dizimista"] = novo_dizimista if novo_dizimista != "N√£o Identificado" else ""
            
            salvar_json(dados, CAMINHO_FINANCEIRO)
            st.success("Movimenta√ß√£o atualizada com sucesso!")
            st.session_state["edicao_financeira_id"] = None
            st.rerun()

        if cancelado:
             st.session_state["edicao_financeira_id"] = None
             st.rerun()

# --- Fun√ß√£o Principal ---

def exibir():
    st.title("üí∞ Gest√£o Financeira da Igreja")
    
    # Carrega dados
    dados = carregar_json(CAMINHO_FINANCEIRO)
    membros = carregar_json(CAMINHO_MEMBROS)
    nomes_membros = [m["nome"] for m in membros]

    # Abas
    aba = st.radio("Selecione:", ["‚ûï Registrar Movimento", "üìä Balan√ßo e An√°lise"], horizontal=True)

    st.markdown("---")

    # Controla a exibi√ß√£o do formul√°rio de edi√ß√£o
    if st.session_state.get("edicao_financeira_id"):
        exibir_form_edicao_historico(dados)
    elif aba == "‚ûï Registrar Movimento":
        exibir_registro_movimento(dados, nomes_membros)
    elif aba == "üìä Balan√ßo e An√°lise":
        exibir_historico_e_balanco(dados, nomes_membros)

if __name__ == '__main__':
    exibir()